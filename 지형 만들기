let cols, rows;
let scl = 20;
let w = 1400;
let h = 1000;

let flying = 0;

let terrain = [];

function setup() {
  createCanvas(600, 600, WEBGL);
  cols = w / scl;
  rows = h / scl;

  for (let x = 0; x < cols; x++) {
    terrain[x] = [];
    for (let y = 0; y < rows; y++) {
      terrain[x][y] = 0;
    }
  }
  noStroke();
}

function draw() {
  flying -= 0.1;
  let yoff = flying;
  for (let y = 0; y < rows; y++) {
    var xoff = 0;
    for (let x = 0; x < cols; x++) {
      terrain[x][y] = map(noise(xoff, yoff), 0, 1, -100, 100);
      xoff += 0.2;
    }
    yoff += 0.2;
  }
  background(0, 50, 120);
  rotateX(PI / 3);
  fill(164, 164, 164);
  translate(-w / 2, -h / 2);
  for (let y = 0; y < rows - 1; y++) {
    beginShape(TRIANGLE_STRIP);
    for (let x = 0; x < cols; x++) {
      let v = terrain[x][y];
      fill(v + 128, 0, 0, v + 100);
      vertex(x * scl, y * scl, terrain[x][y]);
      vertex(x * scl, (y + 1) * scl, terrain[x][y + 1]);
    }
    endShape();
  }
  
  push();
  translate(w / 2, h / 2);
  translate(mouseX - width / 2, (mouseY - height / 2) * 6);
  rotate(PI / 5);

  let outerRadius = 70;
  let innerRadius = 30;
  let numPoints = 5;
  beginShape();
  for (let i = 0; i < TWO_PI; i += TWO_PI / numPoints) {
    let outerX = cos(i) * outerRadius;
    let outerY = sin(i) * outerRadius;
    vertex(outerX, outerY, 0);
    let innerX = cos(i + PI / numPoints) * innerRadius;
    let innerY = sin(i + PI / numPoints) * innerRadius;
    vertex(innerX, innerY, 0);
  }
  endShape(CLOSE);
  
  fill(189, 8, 63);
  sphere(20);
  
  pop();
}
