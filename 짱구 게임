let s;
let scl = 20;
let food;
let speedBoost; // 속도를 증가시키는 아이템
let playfield = 600;
let obstacles = []; // 장애물 배열
let gameStarted = false; // 게임이 시작되었는지 여부를 나타내는 변수
let speedLevel = 5; // 속도 레벨 (기본값은 5)
let speedIncrease = 1; // 속도 증가량
let smileTimer = 0; // 짱구가 웃는 시간을 나타내는 타이머
let isSmiling = false; // 짱구가 웃는지 여부를 나타내는 변수
let highScore = 0;
let count = 0;
let ghosts = [];
let img;
let num =0;

function setup() {
  createCanvas(playfield, 640);
  background(51);
  frameRate(10); // 기본 프레임 속도
  s = new Snake();
  textAlign(CENTER, CENTER);
  textSize(32);
  fill(255);
  text("게임 시작", width / 2, height / 2);
}

function draw() {
  if (gameStarted) {
    background(51);
    scoreboard();
    s.update();
    s.show();
    if (!isGameOver()) { // 게임 오버 상태가 아닐 때만 아이템을 그림
      drawStar(food.x, food.y, 6, 14, 5, color(139, 69, 19)); // 음식의 위치에 별 그리기
      drawStar(speedBoost.x, speedBoost.y, 6, 14, 5, color(255, 215, 0)); // 속도 증가 아이템의 위치에 별 그리기
    count++;
    if(count ==20){
    for (let i = 0; i <2; i++) {
    let x = random(width);
    let y = random(height);
    let diameter = 20;
    let ghost = new Ghost(x, y, diameter);
    ghosts.push(ghost);
    count = 0;
    }
  }

}
    // 장애물 그리기
    for (let i = 0; i < obstacles.length; i++) {
      fill(255, 0, 0);
      rect(obstacles[i].x, obstacles[i].y, scl, scl);
    }

    // 짱구 이미지 그리기
    if (isSmiling) {
      drawSmileShinChan(s);
    } else {
      drawShinChan(s);
    }
  } else {
    // 게임이 시작되지 않은 경우 아무것도 그리지 않음
    background(51);
    textAlign(CENTER, CENTER);
    textSize(32);
    fill(255);
    text("게임 시작", width / 2, height / 2);
  }
  for (let ghost of ghosts) {
    ghost.move();
    ghost.show(255, 0, 0);
    ghost.kill();
  }
}

function isGameOver() {
  // 게임 종료 여부를 확인하는 함수
  return s.checkBoundaryCollision() || s.checkCollisions(food) || s.checkCollisions(speedBoost) || obstacles.some(obstacle => s.checkCollisions(obstacle));
}


function drawStar(x, y, radius1, radius2, npoints, fillColor) {
  // 게임이 종료되면 별을 그리지 않음
  if (!gameStarted) {
    return;
}
  push();
  translate(x, y);
  rotate(frameCount);
  fill(fillColor);
  star(0, 0, radius1, radius2, npoints);
  pop();
  
  

}

function preload() {
  // 사용할 이미지 불러오기
  img = loadImage('https://raw.githubusercontent.com/panlado7/Graphics/main/%EA%B3%B5%EB%A3%A1.png');
}

function pickLocation() {
  let cols = floor(playfield / scl);
  let rows = floor(playfield / scl);
  food = createVector(floor(random(cols)), floor(random(rows)));
  food.mult(scl);

  speedBoost = createVector(floor(random(cols)), floor(random(rows)));
  speedBoost.mult(scl);

  for (let i = 0; i < s.tail.length; i++) {
    let pos = s.tail[i];
    let d1 = dist(food.x, food.y, pos.x, pos.y);
    let d2 = dist(speedBoost.x, speedBoost.y, pos.x, pos.y);
    if (d1 < 1 || d2 < 1) {
      pickLocation();
    }
  }
}


function scoreboard() {
  fill(0);
  rect(0, 600, 600, 40);
  fill(255);
  textFont("Georgia");
  textSize(18);
  text("Score: ", 30, 625);
  text("Highscore: ", 450, 625);
  text(s.score, 70, 625);
  text(highScore, 540, 625);

  // 속도를 게임이 시작되기 전에만 표시
  if (!gameStarted) {
    textSize(24);
    fill(255);
    text("선택한 속도: " + speedLevel, width / 2, height / 2 + 50);
  }
}

function startGame() {
  gameStarted = true;
  frameRate(speedLevel); // 선택한 속도로 프레임 속도 설정
  s = new Snake();
  pickLocation();
}

function restartGame() {
 
  gameStarted = false;
  speedLevel = 5;
  loop(); // 게임 루프 재시작
  setup(); // 새로운 게임 설정

}

function keyPressed() {
  if (!gameStarted) {
    // 게임이 시작되지 않은 경우 속도를 변경할 수 있도록 설정
    if (keyCode === UP_ARROW) { // UP_ARROW 키를 누른 경우 속도 증가량 증가
      speedLevel = min(speedLevel + 1, 9); // 속도 증가
    } else if (keyCode === DOWN_ARROW) { // DOWN_ARROW 키를 누른 경우 속도 증가량 감소
      speedLevel = max(speedLevel - 1, 1); // 속도 감소
    } else if (keyCode === 69) { // 'e' 키를 누른 경우 게임 시작
      startGame();
    }
    // 속도가 변경되었을 때 속도와 속도 증가량을 다시 표시
    if (!gameStarted) {
      fill(255);
      background(51);
      textSize(32);
      text("게임 시작", width / 2, height / 2);
      textSize(24);
      text("선택한 속도: " + speedLevel, width / 2, height / 2 + 50);
    }
  } else {
    // 게임이 시작된 경우에만 Snake의 방향을 변경할 수 있도록 설정
    if (keyCode === UP_ARROW) {
      s.dir(0, -1);
    } else if (keyCode === DOWN_ARROW) {
      s.dir(0, 1);
    } else if (keyCode === RIGHT_ARROW) {
      s.dir(1, 0);
    } else if (keyCode === LEFT_ARROW) {
      s.dir(-1, 0);
    }
  }
}

function gameOver() {
  background(0);
  fill(255);
  textAlign(CENTER);
  textSize(32);
  text("게임 종료", width / 2, height / 2 - 50);
  textSize(24);
  text("점수: " + s.score, width / 2, height / 2);
  text("최고 점수: " + highScore, width / 2, height / 2 + 30);
  text("마우스를 클릭하여 재시작하세요", width / 2, height / 2 + 100);
  noLoop();

  // 게임 오버 상황에서는 장애물을 다시 생성하지 않도록 설정
  obstacles = [];
  
  // Ghost 인스턴스 삭제
  for (let i = ghosts.length - 1; i >= 0; i--) {
    ghosts[i].remove();
  }
}

function Snake() {
  this.x = 0;
  this.y = 0;
  this.xspeed = 1;
  this.yspeed = 0;
  this.total = 0;
  this.tail = [];
  this.score = 0;
  

  this.dir = function (x, y) {
    this.xspeed = x;
    this.yspeed = y;
  };

  this.checkBoundaryCollision = function() {
    if (this.x < 0 || this.x >= width || this.y < 0 || this.y >= height) {
      return true;
    } else {
      return false;
    }
  };

  this.checkCollisions = function(pos) {
    let d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) {
      return true;
    } else {
      return false;
    }
  };

  this.update = function () {
    // Snake의 위치 업데이트
    this.x += this.xspeed * scl;
    this.y += this.yspeed * scl;

    // 벽과 충돌했을 때 게임 종료
    if (this.checkBoundaryCollision()) {
      gameOver();
    }

    // 아이템을 먹었을 때의 동작
    if (this.checkCollisions(food)) {
      this.total++;
      this.score++;
      pickLocation();
      smileTimer = 7; // 점수를 얻을 때마다 웃도록 설정
      if (this.score > highScore) {
        highScore = this.score;
      }
    }

    // 속도를 증가시키는 아이템을 먹었을 때의 동작
    if (this.checkCollisions(speedBoost)) {
      speedLevel += speedIncrease;
      frameRate(speedLevel);
      pickLocation(); 
    }


    // Snake의 꼬리 길이 조절
    for (let i = 0; i < this.tail.length - 1; i++) {
      this.tail[i] = this.tail[i + 1];
    }
    if (this.total >= 1) {
      this.tail[this.total - 1] = createVector(this.x, this.y);
    }
  };

  this.show = function () {
    // 사용자가 만든 캐릭터 그리기
    if (smileTimer > 0) {
      isSmiling = true; // 웃는 상태로 설정
      drawSmileShinChan(this); // 웃는 짱구 이미지 그리기
      smileTimer--;
    } else {
      isSmiling = false; // 일반 상태로 설정
      drawShinChan(this); // 일반 짱구 이미지 그리기
    }
  };
}

class Ghost {
  constructor(x, y, diameter) {
    this.x = x;
    this.y = y;
    this.d = diameter;
    this.speedX = random(-1, 1);
    this.speedY = random(-1, 1);
  }
  
  show(r, g, b) {
    image(img, this.x, this.y, this.d * 2, this.d * 2);
  }
  
  kill() {
    let d = dist(s.x, s.y, this.x, this.y);
    if (d < scl/1.7){
      gameOver();
      // 게임 오버 시 해당 Ghost 인스턴스를 삭제
      this.remove();
    }
  }
  
  move() {
    this.x += this.speedX;
    this.y += this.speedY;
    
    if (this.x < 0 || this.x > width) {
      this.speedX *= -1;
    }
    
    if (this.y < 0 || this.y > height) {
      this.speedY *= -1;
    }
  }
  
  remove() {
    // Ghost 인스턴스를 ghosts 배열에서 삭제
    let index = ghosts.indexOf(this);
    if (index !== -1) {
      ghosts.splice(index, 1);
    }
  }
}


function drawShinChan(s) {
  let sizeFactor = 0.3;
  
  push();
  stroke(255,218,185);
  fill(255,218,185);
  rect(s.x, s.y, 65 * sizeFactor, 60 * sizeFactor);
  rect(s.x + 40 * sizeFactor, s.y, 50 * sizeFactor, 40 * sizeFactor);
  pop();
  push();
  stroke(0);
  fill(255,218,185);
  arc(s.x + 45 * sizeFactor, s.y, 90 * sizeFactor, 90 * sizeFactor, PI, 0);
  arc(s.x, s.y + 30 * sizeFactor, 70 * sizeFactor, 60 * sizeFactor, PI/2, PI + PI/2);
  pop();
  push();
  noFill();
  strokeWeight(15 * sizeFactor);
  arc(s.x + 45 * sizeFactor, s.y, 90 * sizeFactor, 90 * sizeFactor, PI * (4.6/4), PI/360);
  pop();

  push();
  line(s.x, s.y + 60 * sizeFactor, s.x + 58 * sizeFactor, s.y + 60 * sizeFactor);
  pop();
  push();
  stroke(0);
  fill(255,218,185);
  arc(s.x + 90 * sizeFactor, s.y + 20 * sizeFactor, 34 * sizeFactor, 40 * sizeFactor, PI + PI/2 - 6.6, PI/1.93);
  pop();
  push();
  fill(255,0,0);
  ellipse(s.x + 20 * sizeFactor, s.y + 60 * sizeFactor, 10 * sizeFactor, 20 * sizeFactor);
  pop();
  push();
  stroke(0);
  fill(255,218,185);
  arc(s.x + 58 * sizeFactor, s.y + 40 * sizeFactor, 60 * sizeFactor, 40 * sizeFactor, 0, PI/2);
  pop();
  push();
  stroke(50);
  noFill();
  strokeWeight(8 * sizeFactor);
  bezier(s.x, s.y - 15 * sizeFactor, s.x + 15 * sizeFactor, s.y - 30 * sizeFactor, s.x + 15 * sizeFactor, s.y - 30 * sizeFactor, s.x + 30 * sizeFactor, s.y - 15 * sizeFactor);
  bezier(s.x + 45 * sizeFactor, s.y - 15 * sizeFactor, s.x + 60 * sizeFactor, s.y - 30 * sizeFactor, s.x + 60 * sizeFactor, s.y - 30 * sizeFactor, s.x + 75 * sizeFactor, s.y - 15 * sizeFactor);
  strokeWeight(2 * sizeFactor);
  bezier(s.x, s.y - 5 * sizeFactor, s.x + 15 * sizeFactor, s.y - 15 * sizeFactor, s.x + 15 * sizeFactor, s.y - 15 * sizeFactor, s.x + 30 * sizeFactor, s.y - 5 * sizeFactor);
  bezier(s.x + 45 * sizeFactor, s.y - 5 * sizeFactor, s.x + 60 * sizeFactor, s.y - 15 * sizeFactor, s.x + 60 * sizeFactor, s.y - 15 * sizeFactor, s.x + 75 * sizeFactor, s.y - 5 * sizeFactor);
  pop();
  push();
  fill(0);
  ellipse(s.x + 20 * sizeFactor, s.y + 23 * sizeFactor, 20 * sizeFactor, 20 * sizeFactor);
  ellipse(s.x + 53 * sizeFactor, s.y + 23 * sizeFactor, 20 * sizeFactor, 20 * sizeFactor);
  fill(255);
  ellipse(s.x + 20 * sizeFactor, s.y + 23 * sizeFactor, 9 * sizeFactor, 9 * sizeFactor);
  ellipse(s.x + 53 * sizeFactor, s.y + 23 * sizeFactor, 9 * sizeFactor, 9 * sizeFactor);
  pop();
}

function drawSmileShinChan(s) {
  let sizeFactor = 0.3;
  
  push();
  stroke(0);
  fill(255, 218, 185);
  arc(s.x - 45 * sizeFactor, s.y + 24 * sizeFactor, 100 * sizeFactor, 120 * sizeFactor, PI - PI / 7.2, -PI / 9);
  arc(s.x, s.y + 30 * sizeFactor, 70 * sizeFactor, 60 * sizeFactor, PI + PI / 2, PI / 2);
  pop();

  push();
  stroke(50);
  noFill();
  strokeWeight(8 * sizeFactor);
  bezier(s.x - 35 * sizeFactor, s.y - 30 * sizeFactor, s.x - 35 * sizeFactor, s.y - 45 * sizeFactor, s.x - 35 * sizeFactor, s.y - 45 * sizeFactor, s.x - 20 * sizeFactor, s.y - 35 * sizeFactor);
  pop();

  push();
  stroke(255, 218, 185);
  fill(255, 218, 185);
  triangle(s.x - 93 * sizeFactor, s.y + 45 * sizeFactor, s.x, s.y + 60 * sizeFactor, s.x, s.y);
  triangle(s.x - 93 * sizeFactor, s.y + 45 * sizeFactor, s.x, s.y + 60 * sizeFactor, s.x - 50 * sizeFactor, s.y);
  pop();

  push();
  fill(200, 0, 0);
  arc(s.x + 0 * sizeFactor, s.y + 62 * sizeFactor, 20 * sizeFactor, 60 * sizeFactor, PI, -PI / 7);
  pop();

  push();
  stroke(0);
  strokeWeight(3);
  fill(0);
  arc(s.x - 45 * sizeFactor, s.y + 24 * sizeFactor, 100 * sizeFactor, 120 * sizeFactor, PI - PI / 7, -PI / 2.2);
  triangle(s.x - 91 * sizeFactor, s.y + 45 * sizeFactor, s.x - 50 * sizeFactor, s.y + 52 * sizeFactor, s.x - 42 * sizeFactor, s.y);
  pop();

  push();
  stroke(255, 218, 185);
  fill(255, 218, 185);
  arc(s.x - 43 * sizeFactor, s.y + 16 * sizeFactor, 30 * sizeFactor, 30 * sizeFactor, PI / 2, -PI / 2.2);
  pop();

  push();
  stroke(255, 0, 0);
  line(s.x - 8 * sizeFactor, s.y + 9 * sizeFactor, s.x - 18 * sizeFactor, s.y + 19 * sizeFactor);
  line(s.x - 4 * sizeFactor, s.y + 9 * sizeFactor, s.x - 14 * sizeFactor, s.y + 19 * sizeFactor);
  line(s.x, s.y + 9 * sizeFactor, s.x - 10 * sizeFactor, s.y + 19 * sizeFactor);
  line(s.x + 4 * sizeFactor, s.y + 9 * sizeFactor, s.x - 6 * sizeFactor, s.y + 19 * sizeFactor);
  line(s.x + 8 * sizeFactor, s.y + 9 * sizeFactor, s.x - 2 * sizeFactor, s.y + 19 * sizeFactor);
  pop();
}

function mouseClicked() {
  if (!gameStarted && mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height) {
    startGame();
  } else if (!gameStarted) {
    // 게임이 시작되지 않은 상태에서 클릭했을 때는 아무 작업도 하지 않음
    return;
  } else {
    restartGame();
  }
}
function star(x, y, radius1, radius2, npoints) {
  
  let angle = TWO_PI / npoints;
  let halfAngle = angle / 2.0;
  beginShape();
  for (let a = 0; a < TWO_PI; a += angle) {
    let sx = x + cos(a) * radius2;
    let sy = y + sin(a) * radius2;
    vertex(sx, sy);
    sx = x + cos(a + halfAngle) * radius1;
    sy = y + sin(a + halfAngle) * radius1;
    vertex(sx, sy);
  }
  endShape(CLOSE);
}
